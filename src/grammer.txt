// operations required :
/*
    arithmatic operations : - + * /
    func fun_name (x int32, y int32) int32 {
        z int32;
        z = x + y;
        a = z;
        return a;
    }

*/


digit [0-9]
letter [a-zA-Z]
letter_underscore {_letter}
number {digit}+
identifier {letter_underscore}{letter_underscore}*{digit}*
space { \t\n}

tok_func ID ( ID , ID ) {
    ID = ID + ID ;
    return ID;
}

function -> def prototype { body }
prototype -> ID ( decl )
decl -> ID arg_names | ē
arg_names -> , ID arg_names | ē


E  -> T E' | ε
E' -> + T E' | - T E' | ε

T  -> F T'
T' -> * F T' | / F T' | ε

F  -> Unary | Primary

Unary -> - Primary | + Primary

Primary -> ID Trail | NUMBER | '(' NEE ')'

Trail -> '(' args ')' | ε

args -> NEE args' | ε

args' -> , NEE args' | ε

NEE -> T E'
